<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.myapp.dao.StoreDao">
  <resultMap id="BaseResultMap" type="cn.myapp.model.Store">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="brand" jdbcType="VARCHAR" property="brand" />
    <result column="model" jdbcType="VARCHAR" property="model" />
    <result column="date" jdbcType="TIMESTAMP" property="date" />
    <result column="price" jdbcType="DOUBLE" property="price" />
    <result column="count" jdbcType="INTEGER" property="count" />
    <result column="type" jdbcType="VARCHAR" property="type" />
    
  </resultMap>
  <sql id="Base_Column_List">
    id, brand, model, date, price, count, type
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from store
    where id = #{id,jdbcType=INTEGER}
  </select>
  
   <select id="selectLastStoreDate" parameterType="java.lang.String" resultMap="BaseResultMap">
    select date
    from store 
    where brand = #{brand,jdbcType=VARCHAR} and model = #{model,jdbcType=VARCHAR} order by date DESC limit 1
  </select>
  
  <!-- 维修工 -->
  <select id="selectTwoLastStoreRecord"  resultMap="BaseResultMap">
    select 
	<include refid="Base_Column_List" />
    from store 
    where brand = #{brand,jdbcType=VARCHAR} and model = #{model,jdbcType=VARCHAR} order by date DESC limit 2
  </select>
  
	<!-- 获取当月入库数 -->
    <select id="selectThisMonthStoreCount"  resultType="java.lang.Integer">
    select sum(count)
    
    from store
    where DATE_FORMAT( date, '%Y%m' ) = DATE_FORMAT( CURDATE( ) , '%Y%m' )
  </select>
  
  
  <!-- 获取全部入库记录 limit -->
  <select id="selectAllStoreRecord" parameterType="cn.myapp.model.Page" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from store order by date DESC limit  #{pageOffset}, #{pageSize}
  </select>
  
  <!-- 获取全部入库记录   数量 limit  -->
   <select id="selectAllStoreRecordCount" parameterType="cn.myapp.model.Page" resultType="java.lang.Integer">
    select count(*)
    from store order by date DESC
  </select>
  
  <!-- 获取指定入库记录 limit -->
  <select id="selectThisTypeStoreRecord" parameterType="cn.myapp.model.Page" resultMap="BaseResultMap">
   select 
      <include refid="Base_Column_List" />
     from store where type = #{type,jdbcType=VARCHAR} order by date DESC limit  #{pageOffset}, #{pageSize}
  </select>
  
  <!-- 获取指定入库记录    数量   limit -->
  <select id="selectThisTypeStoreRecordCount" parameterType="cn.myapp.model.Page" resultType="java.lang.Integer">
   select 
      <include refid="Base_Column_List" />
     from store where type = #{type,jdbcType=VARCHAR} order by date DESC
  </select>
  
  <!-- 获取查找的 入库记录 数量  -->
  <select id="selectSearchedStoreRecordCount" parameterType="cn.myapp.model.Page" resultType="java.lang.Integer">
    select   ccount(*)
    from store where brand like CONCAT(CONCAT('%',#{brand}),'%') and model like CONCAT(CONCAT('%',#{model}),'%')
  </select>
  <select id="selectSearchedStoreRecordCountByModel" parameterType="cn.myapp.model.Page" resultType="java.lang.Integer">
    select   ccount(*)
    from store where  model like CONCAT(CONCAT('%',#{model}),'%')
  </select>
  <select id="selectSearchedStoreRecordCountByBrand" parameterType="cn.myapp.model.Page" resultType="java.lang.Integer">
    select   ccount(*)
    from store where brand like CONCAT(CONCAT('%',#{brand}),'%') 
  </select>
  
  
  <!-- 获取查找的 入库记录  limit-->
  <select id="searchStoreRecord" parameterType="cn.myapp.model.Page" resultMap="BaseResultMap">
    select   
    <include refid="Base_Column_List" />
    from store where brand like CONCAT(CONCAT('%',#{brand}),'%') and model like CONCAT(CONCAT('%',#{model}),'%') limit  #{pageOffset}, #{pageSize}
  </select>
  
  
  <!-- 维修工 -->
  <select id="searchStoreRecordDes"  resultMap="BaseResultMap">
    select   
    <include refid="Base_Column_List" />
    from store where brand = #{brand} and model = #{model}
  </select>
  
  
  <select id="searchStoreRecordByModel" parameterType="cn.myapp.model.Page" resultMap="BaseResultMap">
    select   
    <include refid="Base_Column_List" />
    from store where model like CONCAT(CONCAT('%',#{model}),'%') limit  #{pageOffset}, #{pageSize}
  </select>
  <select id="searchStoreRecordByBrand" parameterType="cn.myapp.model.Page" resultMap="BaseResultMap">
   select   
    <include refid="Base_Column_List" />
    from store where brand like CONCAT(CONCAT('%',#{brand}),'%') limit  #{pageOffset}, #{pageSize}
  </select>
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from store
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="cn.myapp.model.Store">
    insert into store (id, brand, model, 
      date, price, count, type
      )
    values (#{id,jdbcType=INTEGER}, #{brand,jdbcType=VARCHAR}, #{model,jdbcType=VARCHAR}, 
      #{date,jdbcType=TIMESTAMP}, #{price,jdbcType=DOUBLE}, #{count,jdbcType=INTEGER},#{type,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.myapp.model.Store">
    insert into store
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="brand != null">
        brand,
      </if>
      <if test="model != null">
        model,
      </if>
      <if test="date != null">
        date,
      </if>
      <if test="price != null">
        price,
      </if>
      <if test="count != null">
        count,
      </if>
      <if test="type != null">
        type,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="brand != null">
        #{brand,jdbcType=VARCHAR},
      </if>
      <if test="model != null">
        #{model,jdbcType=VARCHAR},
      </if>
      <if test="date != null">
        #{date,jdbcType=TIMESTAMP},
      </if>
      <if test="price != null">
        #{price,jdbcType=DOUBLE},
      </if>
      <if test="count != null">
        #{count,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        #{type,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.myapp.model.Store">
    update store
    <set>
      <if test="brand != null">
        brand = #{brand,jdbcType=VARCHAR},
      </if>
      <if test="model != null">
        model = #{model,jdbcType=VARCHAR},
      </if>
      <if test="date != null">
        date = #{date,jdbcType=TIMESTAMP},
      </if>
      <if test="price != null">
        price = #{price,jdbcType=DOUBLE},
      </if>
      <if test="count != null">
        count = #{count,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.myapp.model.Store">
    update store
    set brand = #{brand,jdbcType=VARCHAR},
      model = #{model,jdbcType=VARCHAR},
      date = #{date,jdbcType=TIMESTAMP},
      price = #{price,jdbcType=DOUBLE},
      count = #{count,jdbcType=INTEGER},
      type = #{type,jdbcType=VARCHAR},
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>