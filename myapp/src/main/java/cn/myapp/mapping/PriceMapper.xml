<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.myapp.dao.PriceDao">
  <resultMap id="BaseResultMap" type="cn.myapp.model.Price">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="brand" jdbcType="VARCHAR" property="brand" />
    <result column="model" jdbcType="VARCHAR" property="model" />
    <result column="price" jdbcType="DOUBLE" property="price" />
    <result column="sales" jdbcType="DOUBLE" property="sales" />
  </resultMap>
  <sql id="Base_Column_List">
    id, brand, model, price,sales
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from price
    where id = #{id,jdbcType=INTEGER}
  </select>
  
  <select id="selectPriceByModelAndBrand" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from price
    where brand = #{brand} and model =#{model}
  </select>
  
  <!-- 获取所有记录 -->
  <select id="selectAllPriceRecord" parameterType="cn.myapp.model.Page" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from price
    order by brand limit #{pageOffset},#{pageSize}
  </select>
  
<!--   获取所有记录数量 -->
  <select id="selectAllPriceRecordCount" parameterType="cn.myapp.model.Page" resultType="java.lang.Integer">
    select count(*)
    from price
    order by brand
  </select>
  
   <!-- 获取查找的 记录 数量  -->
  <select id="selectSearchedPriceRecordCount" parameterType="cn.myapp.model.Page" resultType="java.lang.Integer">
    select   count(*)
    from price where brand like CONCAT(CONCAT('%',#{brand}),'%') and model like CONCAT(CONCAT('%',#{model}),'%')
  </select>
  <select id="selectSearchedPriceRecordCountByModel" parameterType="cn.myapp.model.Page" resultType="java.lang.Integer">
    select   count(*)
    from price where  model like CONCAT(CONCAT('%',#{model}),'%')
  </select>
  <select id="selectSearchedPriceRecordCountByBrand" parameterType="cn.myapp.model.Page" resultType="java.lang.Integer">
    select   count(*)
    from price where brand like CONCAT(CONCAT('%',#{brand}),'%') 
  </select>
  
  
  <!-- 获取查找的 记录  limit-->
  <select id="searchPriceRecord" parameterType="cn.myapp.model.Page" resultMap="BaseResultMap">
    select   
    <include refid="Base_Column_List" />
    from price where brand like CONCAT(CONCAT('%',#{brand}),'%') and model like CONCAT(CONCAT('%',#{model}),'%') limit  #{pageOffset}, #{pageSize}
  </select>
  
  
  <!-- 维修工 -->
  <select id="searchPriceRecordDes"  resultMap="BaseResultMap">
    select   
    <include refid="Base_Column_List" />
    from price where brand = #{brand} and model = #{model}
  </select>
  
  
  <select id="searchPriceRecordByModel" parameterType="cn.myapp.model.Page" resultMap="BaseResultMap">
    select   
    <include refid="Base_Column_List" />
    from price where model like CONCAT(CONCAT('%',#{model}),'%') limit  #{pageOffset}, #{pageSize}
  </select>
  <select id="searchPriceRecordByBrand" parameterType="cn.myapp.model.Page" resultMap="BaseResultMap">
   select   
    <include refid="Base_Column_List" />
    from price where brand like CONCAT(CONCAT('%',#{brand}),'%') limit  #{pageOffset}, #{pageSize}
  </select>
  
  
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from price
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="cn.myapp.model.Price">
    insert into price (id, brand, model, 
      price,sales)
    values (#{id,jdbcType=INTEGER}, #{brand,jdbcType=VARCHAR}, #{model,jdbcType=VARCHAR}, 
      #{price,jdbcType=DOUBLE}, #{sales,jdbcType=DOUBLE})
  </insert>
  <insert id="insertSelective" parameterType="cn.myapp.model.Store">
    insert into price
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="brand != null">
        brand,
      </if>
      <if test="model != null">
        model,
      </if>
      <if test="price != null">
        price,
      </if>
      <if test="sales != null">
        sales,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="brand != null">
        #{brand,jdbcType=VARCHAR},
      </if>
      <if test="model != null">
        #{model,jdbcType=VARCHAR},
      </if>
      <if test="price != null">
        #{price,jdbcType=DOUBLE},
      </if>
       <if test="sales != null">
        #{sales,jdbcType=DOUBLE},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.myapp.model.Price">
    update price
    <set>
      <if test="brand != null">
        brand = #{brand,jdbcType=VARCHAR},
      </if>
      <if test="model != null">
        model = #{model,jdbcType=VARCHAR},
      </if>
      <if test="price != null">
        price = #{price,jdbcType=DOUBLE},
      </if>
      <if test="sales != null">
        sales = #{sales,jdbcType=DOUBLE},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.myapp.model.Price">
    update price
    set brand = #{brand,jdbcType=VARCHAR},
      model = #{model,jdbcType=VARCHAR},
      price = #{price,jdbcType=DOUBLE},
       sales = #{sales,jdbcType=DOUBLE}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <update id="updatePrice" parameterType="cn.myapp.model.Store">
    update price
    set 
      price = #{price,jdbcType=DOUBLE},
      sales = #{sales,jdbcType=DOUBLE}
    where brand = #{brand} and model=#{model}
  </update>
  
</mapper>